<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning Terraform by Deploying to Vsphere on Things I find interesting</title>
    <link>https://sdorsett.github.io/topics/learning-terraform-by-deploying-to-vsphere/</link>
    <description>Recent content in Learning Terraform by Deploying to Vsphere on Things I find interesting</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018. All rights reserved.</copyright>
    <lastBuildDate>Wed, 26 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sdorsett.github.io/topics/learning-terraform-by-deploying-to-vsphere/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using local-exec and remote-exec provisioners with terraform</title>
      <link>https://sdorsett.github.io/post/2018-12-26-using-local-exec-and-remote-exec-provisioners-with-terraform/</link>
      <pubDate>Wed, 26 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sdorsett.github.io/post/2018-12-26-using-local-exec-and-remote-exec-provisioners-with-terraform/</guid>
      <description>This is the fourth in a series of posts that will walk you through using terraform to deploy and configure virtual machines on vsphere. In this post you will get introduced to using local-exec and remote-exe provisioners to make local (on the deloying system) and remote (on the deployed system) changes. If everything goes right we will also have a functional kubernetes controller that we can build on in future posts.</description>
    </item>
    
    <item>
      <title>Using .gitignore to keep terraform secrets secret</title>
      <link>https://sdorsett.github.io/post/2018-12-24-using-gitignore-to-keep-terraform-secrets-secret/</link>
      <pubDate>Mon, 24 Dec 2018 01:00:00 +0000</pubDate>
      
      <guid>https://sdorsett.github.io/post/2018-12-24-using-gitignore-to-keep-terraform-secrets-secret/</guid>
      <description>This is the third in a series of posts that will walk you through using terraform to deploy and configure virtual machines on vsphere. In this post you will see how to use a .gitignore file to prevent a terraform.tfvar file from getting committed into a git repository.
There is nothing vsphere specific in this post, but it is more about showing a pattern for keeping deployment specifics out of terraform code.</description>
    </item>
    
    <item>
      <title>Using terraform to clone a virtual machine on vSphere</title>
      <link>https://sdorsett.github.io/post/2018-12-24-using-terraform-to-clone-a-virtual-machine-on-vsphere/</link>
      <pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sdorsett.github.io/post/2018-12-24-using-terraform-to-clone-a-virtual-machine-on-vsphere/</guid>
      <description>This is the second in a series of posts that will walk you through using terraform to deploy and configure virtual machines on vsphere. In this post you will get introduced to using terraform to clone an existing template to a new virtual machine.
1. Create a new directory for our terraform code. Start by creating a new directory for the terraform code and cd to it.
[root@terraform ~]# mkdir terraform-vsphere-clone [root@terraform ~]# cd terraform-vsphere-clone/ [root@terraform terraform-vsphere-clone]# 2.</description>
    </item>
    
    <item>
      <title>Using environment variables with terraform</title>
      <link>https://sdorsett.github.io/post/2018-12-23-using-environment-variables-with-terraform/</link>
      <pubDate>Sun, 23 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sdorsett.github.io/post/2018-12-23-using-environment-variables-with-terraform/</guid>
      <description>This is the first in a series of posts that will walk you through using terraform to deploy and configure virtual machines on vsphere. In this post you will get introduced to using environment variables to keep details obout the vsphere infrastructure out of the terraform code.
There is nothing vsphere specific in this post, but it is more about showing a pattern for keeping deployment specifics out of terraform code.</description>
    </item>
    
    <item>
      <title>Learning terraform by deploying to vsphere</title>
      <link>https://sdorsett.github.io/post/2018-12-22-learning-terraform-on-vsphere/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sdorsett.github.io/post/2018-12-22-learning-terraform-on-vsphere/</guid>
      <description>This post is the beginning of a series of posts that will walt through how to use terraform to deploy and configure virtual machines on vsphere. During this series of posts I will try to show how to do this deployment in a generic way in order to keep the terraform code as free as possible of the details of the environment being deployed into.
This series assumes you have the following:</description>
    </item>
    
  </channel>
</rss>